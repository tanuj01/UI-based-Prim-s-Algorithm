q()
pmgdisha<-read.csv("G:/R workshop/Data/Assam/pmgdisha.csv",header = TRUE)
pmgdisha<-read.csv("G:/R workshop/Data/pmgdisha.csv",header = TRUE)
pmgdisha<-as.data.frame(pmgdisha)
library(dplyr)
dis.pmgdisha<-distinct(pmgdisha)
#Remove duplicates on the basis of District, tehsil and Panchayat
dis1.pmgdisha<-distinct(dis.pmgdisha,district_name,tehsil_name,panchayat_name,.keep_all = TRUE)
#EXTRACTING DUPLICATE ENTRIES
dup.Entries<-setdiff(pmgdisha,dis1.pmgdisha)
categorize<-function(reg,cert){
if(reg==0){
return("None")
}
val<-(cert/reg)*100
if(val <= 25){
return("Poor")
}else if(val<=50 & val>25){
return("Below average")
}else if(val<=75 & val>50){
return("Above average")
}else{
return("Excellent")
}
}
category<-NULL
for(i in 1:nrow(dis1.pmgdisha)){
category<-c(category,categorize(dis1.pmgdisha[i,"Registered.candidates"],dis1.pmgdisha[i,"Certified.Candidates"]))
}
dis1.pmgdisha$category<-as.factor(category)
#FUNCTION TO CATEGORIZE THE PANCHAYATS INTO 5 CATEGORIES with passing percentage
derive_percentage<-function(reg,cert){
if(reg==0){
return(reg)
}
val<-(cert/reg)*100
if(val <= 25){
return(val)
}else if(val<=50 & val>25){
return(val)
}else if(val<=75 & val>50){
return(val)
}else{
return(val)
}
}
Result_Percent<-NULL
for(i in 1:nrow(dis1.pmgdisha)){
Result_Percent<-c(Result_Percent,derive_percentage(dis1.pmgdisha[i,"Registered.candidates"],dis1.pmgdisha[i,"Certified.Candidates"]))
}
dis1.pmgdisha$Result_Percent<-as.numeric(Result_Percent)
#FILTER DATA
#ROWS HAVING REGITERED CANDIDATES=0
ZeroReg.pmgdisha<-filter(dis1.pmgdisha,category=="None")
#ROWS HAVING poor track record
poor.pmgdisha<-filter(dis1.pmgdisha,category=="Poor")
#ROWS HAVING below Average track record
belowAverage.pmgdisha<-filter(dis1.pmgdisha,category=="Below average")
#ROWS HAVING Above Average track record
aboveAverage.pmgdisha<-filter(dis1.pmgdisha,category=="Above average")
#ROWS having best performance on Certified candidates
bestcertified.pmgdisha<-filter(dis1.pmgdisha,category=="Excellent")
#COMBINING TWO COLOUMNS IN A DATA FRAME
dis1.pmgdisha$Address <- paste(dis1.pmgdisha$panchayat_name, dis1.pmgdisha$tehsil_name, dis1.pmgdisha$district_name, dis1.pmgdisha$state_name, sep=",")
View(bestcertified.pmgdisha)
#ROWS HAVING REGITERED CANDIDATES=0
ZeroReg.pmgdisha<-filter(dis1.pmgdisha,category=="None")
#ROWS HAVING poor track record
poor.pmgdisha<-filter(dis1.pmgdisha,category=="Poor")
#ROWS HAVING below Average track record
belowAverage.pmgdisha<-filter(dis1.pmgdisha,category=="Below average")
#ROWS HAVING Above Average track record
aboveAverage.pmgdisha<-filter(dis1.pmgdisha,category=="Above average")
#ROWS having best performance on Certified candidates
bestcertified.pmgdisha<-filter(dis1.pmgdisha,category=="Excellent")
write.csv(bestcertified.pmgdisha,'G:/R workshop/Polished Data Prepared/Assam/BestCertified.csv')
save.image("G:/R workshop/R analysis Assam/Assam.RData")
install.packages("optrees")
?getMinimumSpanningTree
??getMinimumSpanningTree
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
library("optrees", lib.loc="~/R/win-library/3.4")
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
x<- 1:7
y<-matrix(c(0,3,5,8,2,0,0,0,8,4,7,5,0,0,0,0,4,3,0,0,0,0,9,2,0,0,0,0,0,3),nrow=5,ncol=6,byrow=TRUE)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
View(y)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = TRUE)
x<- 1:6
y<-matrix(c(1,2,3, 1,3,5, 1,4,8, 1,5,2, 2,3,8, 2,4,4, 2,5,7, 2,6,5, 3,5,4, 3,6,3, 4,5,9, 4,6,2, 5,6,3),ncol=3,byrow=TRUE)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
??getMinimumSpanningTree
y<-read.csv("data.csv",header = FALSE)
y<-read.csv("data.csv",header = FALSE)
y<-read.csv("G:/DAA_project/data.csv",header = FALSE)
y<-read.csv("G:/DAA_project/data.xlsx",header = FALSE)
y<-read.csv("G:/DAA_project/data.xlsx",header = FALSE)
View(y)
y<-read.csv("G:/DAA_project/data.csv",header = FALSE)
View(y)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
y<-matrix(c(1,2,3, 1,3,5, 1,4,8, 1,5,2, 2,3,8, 2,4,4, 2,5,7, 2,6,5, 3,5,4, 3,6,3, 4,5,9, 4,6,2, 5,6,3),ncol=3,byrow=TRUE)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
View(y)
y<-read.csv("G:/DAA_project/data.csv",header = FALSE)
View(y)
y<-matrix(c(1,2,3, 1,3,5, 1,4,8, 1,5,2, 2,3,8, 2,4,4, 2,5,7, 2,6,5, 3,5,4, 3,6,3, 4,5,9, 4,6,2, 5,6,3),ncol=3,byrow=TRUE)
str(y)
y<-read.csv("G:/DAA_project/data.csv",header = FALSE)
str(y)
y<- as.matrix(y)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
library(readxl)
z
z<-xlsx2csv("G:/DAA_project/data.xlsx")
?xlsx2csv
??xlsx2csv
?VB
library(rio)
install.packages("rio")
library(rio)
z<-import("G:/DAA_project/data.xlsx")
View(z)
y<- as.matrix(z)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
library(optrees)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
View(y)
library(optrees)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
y<-read.csv("G:/DAA_project/data.csv",header = FALSE)
y<- as.matrix(y)
library(optrees)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
remove(z)
y<-import("G:/DAA_project/data.xlsx")
y<- as.matrix(y)
View(y)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
y<-convert("data.xlsx", "data.csv")
y<-import("G:/DAA_project/data.xlsx")
y<-convert("data.xlsx", "data.csv")
y<-read.csv("G:/DAA_project/data.csv",header = FALSE)
y<-read.csv("G:/DAA_project/data.csv",header = TRUE)
View(y)
y<- as.matrix(y)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
y<-import("G:/DAA_project/data.xlsx")
y<- as.matrix(y)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
colMaxs(y,value=FALSE)
?colMaxs
??colMaxs
?xcms
??xcms
colMax(y,value=FALSE)
colMax(y)
y<-as.data.frame(y)
colMax(y)
y<- as.matrix(y)
colMaxs(y)
install.packages("terrUtils")
install.packages("Rfast")
library(installr)
install.packages("installr")
library(installr)
updateR
library(installr)
updateR
version
library(dplyr)
max.col(y)
View(y)
?max.col
max.row(y)
y<as.data.frame(y)
View(y)
y<-as.data.frame(y)
View(y)
max(y$v1)
max(y$v2)
max(5,6)
a<-max(max(y$v1),max(y$v2))
x<- 1:a
y<- as.matrix(y)
remove(a)
remove(x)
remove(y)
y<-read.csv("G:/DAA_project/data.csv",header = TRUE)
y<-as.data.frame(y)
a<-max(max(y$v1),max(y$v2))
y<- as.matrix(y)
x<- 1:a
library(optrees)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
y<-read.csv("G:/DAA_project/data.csv",header = TRUE)
y<-as.data.frame(y)
a<-max(max(y$v1),max(y$v2))
y<- as.matrix(y)
x<- 1:a
library(optrees)
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
shiny::runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
shiny::runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
y<-as.data.frame(y)
a<-max(max(y$v1),max(y$v2))
y<- as.matrix(y)
x<- 1:a
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
y<-as.data.frame(y)
a<-max(max(y$v1),max(y$v2))
y<- as.matrix(y)
x<- 1:a
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = TRUE, check.graph = FALSE)
# Only run these examples in interactive R sessions
if (interactive()) {
# A basic shiny app with a plotOutput
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("newplot", "New plot")
),
mainPanel(
plotOutput("plot")
)
)
),
server = function(input, output) {
output$plot <- renderPlot({
input$newplot
# Add a little noise to the cars data
cars2 <- cars + rnorm(nrow(cars))
plot(cars2)
})
}
)
# A demonstration of clicking, hovering, and brushing
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
plotOutput("plot", height=300,
click = "plot_click",  # Equiv, to click=clickOpts(id="plot_click")
hover = hoverOpts(id = "plot_hover", delayType = "throttle"),
brush = brushOpts(id = "plot_brush")
),
h4("Clicked points"),
tableOutput("plot_clickedpoints"),
h4("Brushed points"),
tableOutput("plot_brushedpoints")
),
column(width = 4,
verbatimTextOutput("plot_clickinfo"),
verbatimTextOutput("plot_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newplot", "New plot")),
verbatimTextOutput("plot_brushinfo")
)
)
),
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickinfo <- renderPrint({
cat("Click:\n")
str(input$plot_click)
})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
# Demo of clicking, hovering, brushing with imageOutput
# Note that coordinates are in pixels
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
}
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
getMinimumSpanningTree(x, y,"Prim", start.node = 1, show.data = TRUE, show.graph = FALSE, check.graph = FALSE)
getwd()
shiny::runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
shiny::runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
runApp('G:/DAA_project')
View(pmgdisha)
View(dis1.pmgdisha)
View(belowAverage.pmgdisha)
shiny::runApp('G:/DAA_project')
